{
	"$schema": "http://json-schema.org/draft-07/schema#",
	"definitions": {
		"groups": {
			"$id": "#groups",
			"type": "array",
			"items": {
				"type": "object",
				"properties": {
					"label": {
						"type": "string",
						"maxLength": 256,
						"minLength": 1
					},
					"options": {
						"$ref": "#/definitions/options"
					}
				},
				"additionalProperties": false,
				"required": [
					"label",
					"options"
				]
			}
		},
		"options": {
			"$id": "#options",
			"type": "array",
			"items": {
				"type": "object",
				"properties": {
					"label": {
						"type": "string",
						"maxLength": 256,
						"minLength": 1
					},
					"value": {
						"type": [
							"string",
							"array",
							"boolean",
							"integer",
							"null",
							"number",
							"object"
						]
					},
					"nested": {
						"$ref": "#/definitions/nested"
					},
					"default": {
						"type": "boolean"
					},
					"short": {
						"type": "string"
					}
				},
				"additionalProperties": false,
				"required": [
					"label",
					"value"
				]
			}
		},
		"nested": {
			"$id": "#nested",
			"oneOf": [
				{
					"type": "string"
				},
				{
					"$ref": "#/definitions/parameters"
				},
				{
					"type": "object",
					"properties": {
						"store": {
							"oneOf": [
								{
									"type": "string"
								},
								{
									"$ref": "#/definitions/parameters"
								}
							]
						},
						"domain": {
							"type": "string"
						}
					},
					"additionalProperties": false,
					"required": [
						"store"
					]
				}
			]
		},
		"parameters": {
			"$id": "#parameters",
			"type": "array",
			"items": {
				"$ref": "#/definitions/parameter"
			}
		},
		"parameter": {
			"$id": "#parameter",
			"type": [
				"object",
				"string"
			],
			"properties": {
				"name": {
					"type": "string",
					"maxLength": 128,
					"minLength": 1,
					"description": "Internal parameter name. This is the key in the resulting object. Can contain arbitary characters."
				},
				"label": {
					"type": "string",
					"maxLength": 256,
					"minLength": 1,
					"description": "Parameter label for the user which is displayed in GUI."
				},
				"help": {
					"type": "string",
					"minLength": 1,
					"description": "Parameter description for the user which is displayed in GUI"
				},
				"type": {
					"type": "string",
					"maxLength": 32,
					"minLength": 1,
					"description": "A type of the parameter. Each type has its own documentation page.",
					"enum": [
						"array",
						"boolean",
						"buffer",
						"cert",
						"collection",
						"color",
						"date",
						"email",
						"filename",
						"folder",
						"file",
						"filter",
						"hidden",
						"integer",
						"uinteger",
						"number",
						"path",
						"pkey",
						"port",
						"select",
						"text",
						"time",
						"timestamp",
						"timezone",
						"url",
						"uuid"
					]
				},
				"semantic": {
					"type": "string",
					"minLength": 1,
					"description": "Specification of a semantic type"
				},
				"default": {
					"type": [
						"boolean",
						"array",
						"integer",
						"null",
						"number",
						"object",
						"string"
					],
					"description": "Specifies the default value of the parameter"
				},
				"advanced": {
					"type": "boolean",
					"description": "Specifies if the parameter is advanced or not. Advanced parameters are hidden behind a checkbox in GUI."
				},
				"required": {
					"type": "boolean",
					"description": "Specifies if the parameter is required."
				},
				"grouped": {
					"type": "boolean",
					"description": "If true, options can be grouped by using grouped options syntax."
				},
				"dynamic": {
					"type": "boolean"
				},
				"multiline": {
					"type": "boolean",
					"description": "If true, user will be able to insert new lines in GUI (a textarea will be displayed instead of text field)"
				},
				"sort": {
					"type": "string",
					"description": "Items are unsorted by default, however you can sort them by using this option."
				},
				"sequence": {
					"type": "boolean",
					"description": "If set to true , all properties of the object will be in the same order as they are defined in the spec."
				},
				"tags": {
					"type": "string",
					"description": "Specifies how to treat HTML tags.",
					"enum": [
						"strip",
						"stripall",
						"escape"
					]
				},
				"coder": {
					"type": "boolean"
				},
				"multiple": {
					"type": "boolean",
					"description": "If true, multiple selection is allowed."
				},
				"visible": {
					"type": "string"
				},
				"editable": {
					"description": "If set to true, the user can map the value.",
					"oneOf": [
						{
							"type": "boolean"
						},
						{
							"type": "object",
							"properties": {
								"enabled": {
									"type": "boolean",
									"description": "If set to true , the value of select can be edited (or mapped) manually."
								},
								"help": {
									"type": "string",
									"minLength": 1,
									"description": "Alternative help text which is shown only when the editation is turned on."
								}
							},
							"additionalProperties": false,
							"required": [
								"enabled"
							]
						}
					]
				},
				"mappable": {
					"description": "If set to true, the user can map the value.",
					"oneOf": [
						{
							"type": "boolean",
							"default": true
						},
						{
							"type": "object",
							"properties": {
								"help": {
									"type": "string",
									"minLength": 1,
									"description": "Alternative help text which is shown only when the mapping is turned on. When this help is provided, the field is mappable automatically."
								}
							},
							"additionalProperties": false,
							"required": [
								"help"
							]
						}
					]
				},
				"time": {
					"type": "boolean",
					"description": "If false , the GUI will only display date selection."
				},
				"rpc": {
					"type": "object",
					"properties": {
						"url": {
							"type": "string",
							"description": "The URL of the RPC to be called."
						},
						"label": {
							"type": "string",
							"description": "The text which is displayed on the button."
						},
						"parameters": {
							"description": "An array of parameters of the extra form. Uses regular parameters syntax.",
							"$ref": "#/definitions/parameters"
						}
					},
					"additionalProperties": false,
					"required": [
						"url",
						"label"
					]
				},
				"mode": {
					"type": "string",
					"description": "Specifies the initial mode, when editable is true.",
					"enum": [
						"edit",
						"choose"
					]
				},
				"labels": {
					"type": "object",
					"description": "Custom labels of the buttons. You can find more about this feature in the docs."
				},
				"spec": {
					"description": "Describes the data structure of the parameter.",
					"oneOf": [
						{
							"$ref": "#/definitions/parameter"
						},
						{
							"$ref": "#/definitions/parameters"
						}
					]
				},
				"codepage": {
					"type": "string",
					"description": "The codepage of the buffer."
				},
				"pattern": {
					"type": "string",
					"description": "Specifies a RegExp pattern that a text parameter should conform to."
				},
				"nested": {
					"description": "Specifies an array of nested parameters.",
					"$ref": "#/definitions/nested"
				},
				"options": {
					"description": "Specifies options for the select.",
					"oneOf": [
						{
							"$ref": "#/definitions/options"
						},
						{
							"type": "string"
						},
						{
							"type": "object",
							"properties": {
								"store": {
									"description": "Specifies options.",
									"oneOf": [
										{
											"type": "string"
										},
										{
											"$ref": "#/definitions/options"
										},
										{
											"$ref": "#/definitions/groups"
										}
									]
								},
								"label": {
									"type": "string",
									"description": "Specifies the name of a property that will be used as the label of an option."
								},
								"value": {
									"type": "string",
									"description": "Specifies the name of a property that will be used as the value of an option."
								},
								"default": {
									"type": "string",
									"description": "Specifies the default value."
								},
								"learning": {
									"type": "boolean"
								},
								"placeholder": {
									"description": "Specifies the label which will be shown when no option is selected.",
									"oneOf": [
										{
											"type": "string"
										},
										{
											"type": "object",
											"properties": {
												"label": {
													"type": "string",
													"description": "Specifies the label which will be shown when no option is selected."
												},
												"nested": {
													"description": "Specifies an array of nested parameters which will be shown when no option is selected.",
													"$ref": "#/definitions/nested"
												}
											},
											"additionalProperties": false
										}
									]
								},
								"nested": {
									"description": "Specifies an array of nested parameters.",
									"$ref": "#/definitions/nested"
								},
								"operators": {
									"description": "Custom operators. The data structure is the same as the grouped select box.",
									"$ref": "#/definitions/groups"
								},
								"logic": {
									"description": "Specifies if only and, or or both types of filters are available.",
									"type": "string"
								},
								"scope": {
									"oneOf": [
										{
											"type": "array",
											"items": {
												"type": "string"
											}
										},
										{
											"type": "object",
											"additionalProperties": {
												"type": "array",
												"items": {
													"type": "string"
												}
											}
										}
									]
								},
								"ids": {
									"type": "boolean",
									"description": "If set to true , you can work with folder IDs. That means that GUI loads previously selected folders and their labes after reopening the form without having to call the RPC again."
								},
								"showRoot": {
									"type": "boolean",
									"description": "If set to false , top-level folders aren't prefixed with / and there's no option to choose the root /."
								},
								"singleLevel": {
									"type": "boolean",
									"description": "If set to true , only single level of folders is available."
								}
							},
							"additionalProperties": false
						}
					]
				},
				"extension": {
					"description": "Allowed extension or array of allowed extensions.",
					"oneOf": [
						{
							"type": "string"
						},
						{
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					]
				},
				"validate": {
					"description": "Specifies parameter validation.",
					"oneOf": [
						{
							"type": "boolean"
						},
						{
							"type": "object",
							"properties": {
								"max": {
									"description": "Specifies maximum length.",
									"type": "number"
								},
								"min": {
									"description": "Specifies minimum length.",
									"type": "number"
								},
								"pattern": {
									"description": "Specifies a RegExp pattern that a text parameter should conform to.",
									"type": "string"
								},
								"minItems": {
									"type": "integer",
									"description": "Specifies minimum length that an array parameter can have."
								},
								"maxItems": {
									"type": "integer",
									"description": "Specifies maximum length that an array parameter can have."
								},
								"enum": {
									"type": "array",
									"description": "Array of allowed values in the array."
								}
							},
							"additionalProperties": false
						}
					]
				}
			},
			"additionalProperties": false,
			"required": [
				"type"
			]
		}
	},
	"type": "array",
	"items": {
		"$ref": "#/definitions/parameter"
	}
}